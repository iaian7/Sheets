/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
	dashcode.setupParts();
	loadPrefs();
	versionCheck();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
	// Stop any timers to prevent CPU usage
	// Remove any preferences as needed
	// widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
	erasePrefs();
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
	// Stop any timers to prevent CPU usage
	savePrefs();
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
	// Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
	// Retrieve any preference values that you need to be synchronized here
	// Use this for an instance key's value:
	// instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
	//
	// Or this for global key's value:
	// globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
	var front = document.getElementById("front");
	var back = document.getElementById("back");

	if (window.widget) {
		widget.prepareForTransition("ToBack");
	}

	front.style.display = "none";
	back.style.display = "block";

	if (window.widget) {
		setTimeout('widget.performTransition();', 0);
	}
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
	var front = document.getElementById("front");
	var back = document.getElementById("back");

	if (window.widget) {
		widget.prepareForTransition("ToFront");
		updatePrefs();
	}

	front.style.display="block";
	back.style.display="none";

	if (window.widget) {
		setTimeout('widget.performTransition();', 0);
	}
}

if (window.widget) {
	widget.onremove = remove;
	widget.onhide = hide;
	widget.onshow = show;
	widget.onsync = sync;
}

// Begin app-specific functions

var wid = widget.identifier;
var prefType = loadPref(wid+"type",0);
var prefSize = loadPref(wid+"size","128x128");
var prefTile = loadPref(wid+"tile","4x4");
var prefLocation = loadPref(wid+"loc","/opt/local/bin/");

// Preference Saving

function loadPref(key,value) {
	var string = widget.preferenceForKey(key);
	if (string != null) {
		return string;
	} else {
		widget.setPreferenceForKey(value,key);
		return value;
	}
}

function loadPrefs() {
//	alert("ready!");
	document.getElementById("type").object.setSelectedIndex(prefType);
	document.getElementById("size").value = prefSize;
	document.getElementById("tile").value = prefTile;
	document.getElementById("loc").value = prefLocation;
	updateSize(size);
}

function savePref(key,value) {
	if (window.widget) {
		widget.setPreferenceForKey(value,wid+key);
	}
}

function updatePrefs() {
	if (window.widget) {
		widget.setPreferenceForKey(prefType,wid+"type");
		widget.setPreferenceForKey(prefSize,wid+"size");
		widget.setPreferenceForKey(prefTile,wid+"tile");
		widget.setPreferenceForKey(prefLocation,wid+"loc");
	}
}

function erasePrefs() {
	if (window.widget) {
		widget.setPreferenceForKey(null,wid+"type");
		widget.setPreferenceForKey(null,wid+"size");
		widget.setPreferenceForKey(null,wid+"tile");
		widget.setPreferenceForKey(null,wid+"loc");
	}
}

// Basic Functions

function updateType(event) {
	prefType = document.getElementById("type").object.getSelectedIndex();
	updatePrefs();
}

function updateSize(event) {
	var size = document.getElementById("size");
	prefSize = parseInt(size.value);
}

function updateTile(event) {
	var tile = document.getElementById("tile");
	prefTile = parseInt(tile.value);
}



// Be sure to assign these handlers for the ondragenter and ondragover events on your drop target. These handlers prevent Web Kit from processing drag events so you can handle the drop when it occurs.

function dragEnter(event) {
	event.stopPropagation();
	event.preventDefault();
}

function dragOver(event) {
	event.stopPropagation();
	event.preventDefault();
}

function dragDrop(event) {
	try {
		uri = event.dataTransfer.getData("text/uri-list");	
		uri = uri.replace(/file:\/\/localhost/gi, "");
		uri = uri.replace(/\%20/gi, "\\ ");
		uri = uri.split("\n");
		uri = uri.sort();

		alert(uri.length);

		if (uri.length == 1) {
//			alert(uri[0].search(/[0-9]/));
//			alert(uri[0].match(/(\d{2,9})(\.\w{3,4})$/));
			alert(uri[0].match(/(.+?)(\d+)(\.\w{3,4})$/));
			alert(RegExp.$1);
			alert(RegExp.$2);
			alert(RegExp.$3);
		} else {
			alert("\t"+uri.join(" "));
			widget.system(prefLocation+"montage -background none -geometry +0+0 "+uri.join(" ")+" /fileOutput.png", endHandler).outputString;
		}
	} catch (ex) {
		alert("Problem fetching URI: " + ex);
		showFail(event);
	}

	event.stopPropagation();
	event.preventDefault();
}

function endHandler (output) {
		// Alert the output of the command
		alert("output = "+output.outputString);
}

// Key listeners

function selectIt(event) {
	if(event.target){
		event = event.target
	}
//	event.focus();
	event.select();
}

// CurrentView animations

function showMain(event) {
	document.getElementById("stack").object.setCurrentView("main", false, true);
}

function showSuccess(event) {
	document.getElementById("stack").object.setCurrentView("success", true, true);
}

function showFail(event) {
	document.getElementById("stack").object.setCurrentView("fail", true, true);
}

function showWrong(event) {
	document.getElementById("stack").object.setCurrentView("wrong", true, true);
}

function showUpdate(event) {
	document.getElementById("stack").object.setCurrentView("update", true, true);
}

// Get Key Value

function getKeyValue(plist, key) {
	var infoPlist = new XMLHttpRequest();
	infoPlist.open("GET", plist, false);
	infoPlist.send(null);
	infoPlist = infoPlist.responseText.replace(/(<([^>]+)>)/ig,"").replace(/\t/ig,"").split("\n");
	for (var i=0; i<infoPlist.length; i++)
		if (infoPlist[i] == key) return infoPlist[i+1];
	return false;
}

// Auto Update

function versionCheck(event) {
return



	var request = new XMLHttpRequest();
	var address = "http://iaian7.com/files/dashboard/sheets/version.php?RandomKey=" + Date.parse(new Date());
	alert(address);
	request.open("GET", address,false);
	request.send(null);
	var versions = request.responseText.split("\n");

	var bundleVersion = getKeyValue("Info.plist", "CFBundleVersion"); 
	var websiteVersion = versions[0];
	alert("bundleVersion: "+bundleVersion);
	alert("websiteVersion: "+websiteVersion);

	if (websiteVersion != bundleVersion) {
		document.getElementById("newVersion").innerHTML = "version "+versions[0]+"<br/>"+versions[1];
		showUpdate();
	} else {
		alert("you have an up to date version, or there's been an error");
	}
}

// Download File

function versionDownload() {
	widget.openURL("http://iaian7.com/files/dashboard/sheets/Sheets.zip");
	showMain();
}

// Visit the website

function iaian7(event)
{
	widget.openURL("http://iaian7.com/dashboard/sheets");
}